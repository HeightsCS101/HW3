package cs101;

//DO NOT EDIT THIS FILE

import java.util.Random;

public class Board {

	private Mark top_left;
	private Mark top_center;
	private Mark top_right;

	private Mark middle_left;
	private Mark middle_center;
	private Mark middle_right;

	private Mark bottom_left;
	private Mark bottom_center;
	private Mark bottom_right;

	public Board() {
		this.top_left = Mark.BLANK;
		this.top_center = Mark.BLANK;
		this.top_right = Mark.BLANK;

		this.middle_left = Mark.BLANK;
		this.middle_center = Mark.BLANK;
		this.middle_right = Mark.BLANK;

		this.bottom_left = Mark.BLANK;
		this.bottom_center = Mark.BLANK;
		this.bottom_right = Mark.BLANK;

	}

	public boolean play_top_left(Mark mark) {
		if (top_left == Mark.BLANK) {
			top_left = mark;
			return true;
		} else {
			return false;
		}
	}

	public boolean top_left_empty() {
		return (top_left == Mark.BLANK);
	}

	public boolean play_top_center(Mark mark) {
		if (top_center == Mark.BLANK) {
			top_center = mark;
			return true;
		} else {
			return false;
		}
	}

	public boolean top_center_empty() {
		return (top_center == Mark.BLANK);
	}

	public boolean play_top_right(Mark mark) {
		if (top_right == Mark.BLANK) {
			top_right = mark;
			return true;
		} else {
			return false;
		}
	}

	public boolean top_right_empty() {
		return (top_right == Mark.BLANK);
	}

	public boolean play_middle_left(Mark mark) {
		if (middle_left == Mark.BLANK) {
			middle_left = mark;
			return true;
		} else {
			return false;
		}
	}

	public boolean middle_left_empty() {
		return (middle_left == Mark.BLANK);
	}

	public boolean play_middle_center(Mark mark) {
		if (middle_center == Mark.BLANK) {
			middle_center = mark;
			return true;
		} else {
			return false;
		}
	}

	public boolean middle_center_empty() {
		return (middle_center == Mark.BLANK);
	}

	public boolean play_middle_right(Mark mark) {
		if (middle_right == Mark.BLANK) {
			middle_right = mark;
			return true;
		} else {
			return false;
		}
	}

	public boolean middle_right_empty() {
		return (middle_right == Mark.BLANK);
	}

	public boolean play_bottom_left(Mark mark) {
		if (bottom_left == Mark.BLANK) {
			bottom_left = mark;
			return true;
		} else {
			return false;
		}
	}

	public boolean bottom_left_empty() {
		return (bottom_left == Mark.BLANK);
	}

	public boolean play_bottom_center(Mark mark) {
		if (bottom_center == Mark.BLANK) {
			bottom_center = mark;
			return true;
		} else {
			return false;
		}
	}

	public boolean bottom_center_empty(Mark mark) {
		return (bottom_center == Mark.BLANK);
	}

	public boolean play_bottom_right(Mark mark) {
		if (bottom_right == Mark.BLANK) {
			bottom_right = mark;
			return true;
		} else {
			return false;
		}
	}

	public boolean bottom_right_empty(Mark mark) {
		return (bottom_right == Mark.BLANK);
	}

	public void play_random_square(Mark mark) {

		Random random = new Random();

		boolean played = false;
		while (!played) {
			int r = random.nextInt(9);
			if (r == 0) {
				played = play_top_left(mark);
			} else if (r == 1) {
				played = play_top_center(mark);
			} else if (r == 2) {
				played = play_top_right(mark);
			} else if (r == 3) {
				played = play_middle_left(mark);
			} else if (r == 4) {
				played = play_middle_center(mark);
			} else if (r == 5) {
				played = play_middle_right(mark);
			} else if (r == 6) {
				played = play_bottom_left(mark);
			} else if (r == 7) {
				played = play_bottom_center(mark);
			} else if (r == 8) {
				played = play_bottom_right(mark);
			}
		}

	}

	public boolean is_board_empty() {
		return (top_left == Mark.BLANK && top_center == Mark.BLANK && top_right == Mark.BLANK
				&& middle_left == Mark.BLANK && middle_center == Mark.BLANK && middle_right == Mark.BLANK
				&& bottom_left == Mark.BLANK && bottom_center == Mark.BLANK && bottom_right == Mark.BLANK);

	}

	public boolean is_board_full() {
		return (top_left != Mark.BLANK && top_center != Mark.BLANK && top_right != Mark.BLANK
				&& middle_left != Mark.BLANK && middle_center != Mark.BLANK && middle_right != Mark.BLANK
				&& bottom_left != Mark.BLANK && bottom_center != Mark.BLANK && bottom_right != Mark.BLANK);

	}

	// win conditions
	public Mark game_is_over() {
		// vertical
		if ((top_left == middle_left) && (top_left == bottom_left) && (top_left != Mark.BLANK)) {
			return top_left;
		} else if ((top_center == middle_center) && (top_center == bottom_center) && (top_center != Mark.BLANK)) {
			return top_center;
		} else if ((top_right == middle_right) && (top_right == bottom_right) && (top_right != Mark.BLANK)) {
			return top_right;

			// horizontal
		} else if ((top_left == top_center) && (top_left == top_right) && (top_left != Mark.BLANK)) {
			return top_left;
		} else if ((middle_left == middle_center) && (middle_left == middle_right) && (middle_left != Mark.BLANK)) {
			return middle_left;
		} else if ((bottom_left == bottom_center) && (bottom_left == bottom_right) && (bottom_left != Mark.BLANK)) {
			return bottom_left;

			// diagonal
		} else if ((top_left == middle_center) && (top_left == bottom_right) && (top_left != Mark.BLANK)) {
			return top_left;
		} else if ((top_right == middle_center) && (top_right == bottom_left) && (top_right != Mark.BLANK)) {
			return top_right;

		} else { // no one has won yet (or draw)
			return Mark.BLANK;
		}

	}

	public void print() {
		System.out
				.println("| " + this.top_left.symb + " | " + this.top_center.symb + " | " + this.top_right.symb + " |");
		System.out.println("-------------");
		System.out.println(
				"| " + this.middle_left.symb + " | " + this.middle_center.symb + " | " + this.middle_right.symb + " |");
		System.out.println("-------------");
		System.out.println(
				"| " + this.bottom_left.symb + " | " + this.bottom_center.symb + " | " + this.bottom_right.symb + " |");

		System.out.println("\n\n");

	}

}
